class MyCircularDeque {
private:
    int size;
    int front;
    int last;
    vector<int> a;
public:
    MyCircularDeque(int k) {
        size = k+1;
        front = 0;
        last = 0;
        a.assign(size,0);
    }
    
    bool insertFront(int value) {
        if(isFull()){
            return false;
        }
        front = (front - 1 + size)%size;
        a[front] = value;
        return true;
    }
    
    bool insertLast(int value) {
        if(isFull()){
            return false;
        }
        a[last] = value;
        last = (last + 1)%size;
        return true;
    }
    
    bool deleteFront() {
        if(isEmpty()){
            return false;
        }
        front = (front + 1)%size;
        return true;
    }
    
    bool deleteLast() {
        if(isEmpty()){
            return false;
        }
        last = (last - 1 + size)%size;
        return true;
    }
    
    int getFront() {
        if(isEmpty()){
            return -1;
        }
        return a[front];
    }
    
    int getRear() {
        if(isEmpty()){
            return -1;
        }
        return a[(last-1+size)%size];
    }
    
    bool isEmpty() {
        if(front == last){
            return true;
        }
        return false;
    }
    
    bool isFull() {
        int x = front - last;
        if(x == 1 || (last - front == size - 1)){
            return true;
        }
        return false;
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */