/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        this->inorder = inorder;
        this->postorder = postorder;
        int n = postorder.size() - 1;
        //TreeNode* root = new TreeNode(postorder[n]);
        return build(0, inorder.size() -1, 0, postorder.size() - 1);


    }
    //l1代表中序遍历的数组，l2代表后序遍历的数组
    TreeNode* build(int l1, int r1, int l2, int r2){
        if(l1 > r1) return nullptr;
        TreeNode* root = new TreeNode(postorder[r2]);
        int mid = l1;
        while(inorder[mid] != root->val) mid++;
        root->left = build(l1, mid - 1, l2, l2 + mid - l1 - 1);
        root->right = build(mid + 1, r1, l2 + mid -l1, r2 - 1);
        return root;
    }
private:
    vector<int> inorder;
    vector<int> postorder;
};